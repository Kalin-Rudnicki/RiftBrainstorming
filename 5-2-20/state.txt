
I think this constitutes something separate than effect, as I think a change in state is probably important to "acknowledge" (see what I did there),
but not necessarily the same as an "effect"

I would consider an effect to be more of dealing with the outside world,
and a state change being just that, updating somethings state.
Those things could both happen at once, or both separately, and should not be coupled.

I would say "$" would be a good symbol for state.
The same rules would apply to "$" as "!", and I think it would be fair to say that "acknowledge" would be similar enough in this case that it could apply to both.

A (forward) reference (if youre reading this in order) to dynamic code,
I think the same rules would apply here as well with "$" as "!".
You would almost need 4 different evals, (can state, cant state) x (can effect, cant effect)

eval => (can state, cant effect)
pureEval => (cant state, cant effect)

what would ".." be?
what would "..." be?



Now, there is 1 important distinction between the "acknowledgement" of "!" and "$".
It will be COMPLETELY acceptable to do stateful operations, and not be required to say you do so, under 1 condition:
None of those operations were done ON any of the inputs.

In fact, and I think this should overall apply to all of "?"/"!"/"$", you SHOULD NOT be able to "propegate" one of these unless you were forced to.
This goes back to an earlier example where I might have done something like:

```rift

    res1: Int? = 5

```

ERROR! (warning?) : There is no reason to have a "?" here
(Same with "!" and "?")

There is 1 edge case, as I (at least at this time) like the idea of sharing acknowledge for "!" and "$".

If there is some block of code that results in a "!$", but the "$" part of it qualifies for the above rule,
it should (be silently ignored / warning/info saying theres no need to acknowledge it)

Side note:
1) acknowledge effectfulFunction
2) acknowledge ~effectfulFunction
(I think #2, as it goes along with the idea that "Unless you '~', there is be literally no telling its a '!' whatsoever")


On top of all of it, I dont think that simply being forced to return a "$" is enough...
Lets say you have 5 inputs to the function, and get back a "$", whats being changed?

```rift

    // Simple example
    def addToMap[K, V](map: Map[K, V]$, key: K, value: V): Unit$ = {
        map << key -> value
    }

```

Notice how there is a "$" in the return, but also one after the map?
This tells the caller: I am going to do stateful things to this map
Now, this makes the idea of only neededing to return "$" if a param is statefully changed much easier.
1) A param can not be "$" unless you actually do a stateful action on it
2) You can only return "$" if you do a stateful action that affects a param

Ooo, what about global variables. I think that needs to be expanded to "params or gloabl variables"

Imagine "puts", thats essentially something along the lines of STD_OUT.puts(...)

Another more complicated example is what to do when you want to save a stateful thing

Example:

```rift

    def createSaveReturn(list: List[Person]$): Person = {
        person: Person = Person("First", "Last")
        list << person
        person
    }

```

Now, we have a deliema here... list has a Person it thinks it can change,
but the caller of this function things they are getting a stateless Person.

I think that, unlike "?" and "!" that get flattened out, "$" does not.
Ex: you would never have a "Option[Person?]?", but would "Option[Person$]$" make sense?

```rift

    res1: Option[Person]$ = ...
    // You can change the value of res1, but not modify the value inside
    // This tells us that it is ok to assign things to this variable that are not allowed to be changed

    res2: Option[Person$] = ...
    // You can cange the value inside of res2, but not what res2 points to

    res3: Option[Person$]$ = ...
    // You can change what res3 points to, and change the internals of either the original value, or anything assigned to it.
    // This means that this is not allowed:

    res3 = res1
    // res1 says that "I can not be internally modified"

```

Does it make sense to have these 2 things use different symbols? ($ / #)?
Not immediately apparent to me, I think 1 would apply to params, and 1 would apply to return values

As far as return values, theres almost 3 options (2?):
1) It is not acceptable to modify this thing internally
2) It is ok to modify this thing internally if you want to
3) Some sort of in-between?

This starts to get really complicated if you look at something like a Person, which you might be able to change their first name, last name, list of friends, favorite food, ...
How do you specify (Im returning this Person, you can modify its friends, but not its favorite food)?

At that point, I think its probably getting too complex?
This makes me think that the "$" / "#" is a good idea...

There must be some sound logic here as to being able to reason about this.



-----

I think it is good to use "$" / "#".
1) "$" represents "my state will be modified", and goes only on parameters
2) "#" represents "my state .....

Now that I think about it, maybe it doesnt make sense...
Maybe it just makes sense to use "$" everywhere
1) def test(person: Person$) ...
    Says that person might have something about its state changed
    Note that this will not compile unless something actually attempts to change person's state
2) def test: Person$ ...
    Says that it is ok to change the state of the person returned from this function
3) person: Person$ = ...
    Says that it is ok to modify the state of this thing


It is always to to assign a ___$ to a ___, but never ok to assign as ___ to a ___$

I believe with these evolutions of ideas, it is no longer essential, or even desired, to have "acknowledge" having anything to do with "$"
The "$" in the parameters "acknowledges" that the state of that thing will/might change 

I think that using variable names as ___$ is a nice way to reflect whether or not the variable is final, and then "$" on the type says whether the type can be internally modified.

I think you would need multiple verions of the standard library to make this work out, because I dont think you can model this in a consistent way with types.
Lets say you have:

```rift

    class Person(firstName: String, lastName$: String, birthday: Date)

    p1: Person = ...
    p2: Person$ = ...
    p3$: Person = ...
    p4$: Person$ = ...

```

Note: the above statement about ___$ -> ___ vs ___ -> ___$ is incorrect

If you assign a ___$ to a ___, you need to have a guarantee that it didnt get passed off to some other ___$

Maybe this is where "#" comes into play?
"#" in the return type says "I can be modified",
and as soon as anything fishy happens where any part of x or children might be given to a "$",
it turns from a "#" to a "$".

"___#" can be assigned to "___" no problem
"___" can never be assigned/pass to "___$"
As soon as anything affects a "#" turning it into a "$", you cant do that anymore

Is there an analogous version of this with "#" in the parameters?
Is there different rules saving/returning vs passing?

Maybe the key is passing to something that might save it?



With more thought, I think that "#" is exclusive for parameters, representing that something can/will be saved.

```rift

    class Person(/* ... */ firstName: String#, lastName$: String)

```

Timeout...


I think the whole "#" on every parameter is a little overboard...
It definitely gives you a much better sense of whats going on,
but I think it gets away from one of the main points, of writing enjoyable code, having to deal with those everywhere just seems like a major annoyance.

Heres how I think it goes...
1) A return type including "$" says:
    "I can tell you right now... this might get changed"
2) A return type with no "$" or "#" says:
    "As far as Im concerned, this has no constraints on it at this point... do what you want with it"
3) A return type with "#" says:
    "Hey, I made some guarantee so someone else that this CAN NOT be changed, so you need to abide by that"

If my initial intuition is correct, "" could turn into either "$" or "#", but once you are in either, you are stuck.

